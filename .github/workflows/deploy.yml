name: Java CI with Gradle

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
    types:
      - labeled
      - unlabeled
      - synchronize
      - opened
      - edited
      - ready_for_review
      - reopened
      - unlocked
  pull_request_review:
    types:
      - submitted
  check_suite:
    types:
      - completed
  status: {}

permissions:
  contents: read
  issues: read
  checks: write
  pull-requests: write

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v3

      #자바 17 설치
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'zulu'
    
    # Gradle wrapper 파일 실행 권한주기
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew    

    
    # Gradle test를 실행한다
    - name: Test with Gradle
      run: ./gradlew --info test

    # 테스트가 실패하여도 Report를 보기 위해 `always`로 설정
    - name: Publish Test Results
      uses: EnricoMi/publish-unit-test-result-action@v2
      if: always()
      with:
        files: |
          build/test-results/**/*.xml

    # 테스트 결과를 저장
    - name: Save test reports
      uses: actions/upload-artifact@v2
      with:
        name: test-reports
        path: build/test-results

    # 빌드
    - name: Build with Gradle
      uses: gradle/gradle-build-action@bd5760595778326ba7f1441bcf7e88b49de61a25 # v2.6.0
      with:
        arguments: build

    # 자동 Merge 설정
    - id: automerge
      name: automerge
      uses: "pascalgn/automerge-action@v0.15.6"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      with:
        label: "automerge"

#      # 추가
#      - name: Make zip file #1
#        run: zip -qq -r ./$GITHUB_SHA.zip .
#        shell: bash
#
#      - name: Configure AWS credentials #2
#        uses: aws-actions/configure-aws-credentials@v1
#        with:
#          aws-access-key-id: ${{ secrets.ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.ACCESS_KEY_SECRET }}
#          aws-region: ap-northeast-2
#
#      - name: Upload to S3 #3
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.zip s3://${{ secrets.S3_BUCKET_NAME }}/$GITHUB_SHA.zip
#
#      - name: Code Deploy #4
#        run: aws deploy create-deployment --application-name gk-todo
#          --deployment-config-name CodeDeployDefault.OneAtATime
#          --deployment-group-name dev
#          --s3-location bucket=${{ secrets.S3_BUCKET_NAME }},bundleType=zip,key=$GITHUB_SHA.zip
